"use client";

import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Ban } from "lucide-react";

type MalwareRow = {
  id: string;
  severity: "CRITICAL" | "HIGH" | "MEDIUM" | "LOW";
  signature: string;
  path: string;
  status: "Active" | "Quarantined" | "Resolved";
  detectedAt: string;
};

interface MalwareCardProps {
  setViewAllOpen: (open: boolean) => void;
  setViewAllTitle: (title: string) => void;
  setViewAllDataset: (dataset: "firewalls" | "certs" | "alerts" | "malware") => void;
  setViewAllRows: (rows: any[]) => void;
  setViewAllCols: (cols: { key: string; label: string; className?: string }[]) => void;
}

const SEVERITY_COLOR = {
  CRITICAL: "bg-red-500 text-white",
  HIGH: "bg-orange-500 text-white",
  MEDIUM: "bg-yellow-500 text-black",
  LOW: "bg-blue-500 text-white",
};

export default function MalwareCard({
  setViewAllOpen,
  setViewAllTitle,
  setViewAllDataset,
  setViewAllRows,
  setViewAllCols,
}: MalwareCardProps) {
  const [malware, setMalware] = useState<MalwareRow[]>([]);

  const API_BASE = process.env.NEXT_PUBLIC_BASE_URL;

  const getAuthToken = () => {
    if (typeof window !== "undefined") return localStorage.getItem("token");
    return null;
  };

  const fetchMalware = async () => {
    try {
      const token = getAuthToken();
      if (!token) return console.error("No auth token found");

      const res = await fetch(`${API_BASE}/security/malware`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      if (!res.ok) return console.error("Failed to fetch malware:", res.statusText);

      const data = await res.json();
      setMalware(data.rows);
    } catch (err) {
      console.error("Error fetching malware:", err);
    }
  };

  useEffect(() => {
    fetchMalware();
  }, []);

  const openMalwareModal = () => {
    setViewAllDataset("malware");
    setViewAllTitle("All Malware Detections");
    setViewAllRows(
      malware.map((m) => ({
        severity: m.severity,
        signature: m.signature,
        path: m.path,
        status: m.status,
        detectedAt: new Date(m.detectedAt).toLocaleString(),
      }))
    );
    setViewAllCols([
      { key: "severity", label: "Severity" },
      { key: "signature", label: "Signature" },
      { key: "path", label: "Path", className: "font-mono" },
      { key: "status", label: "Status" },
      { key: "detectedAt", label: "Detected At" },
    ]);
    setViewAllOpen(true);
  };

  return (
    <Card className="lg:col-span-6">
      <CardHeader>
        <CardTitle className="flex items-center">
          <Ban className="w-5 h-5 mr-2" />
          Malware Detections
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-3">
        {malware.map((m) => (
          <div key={m.id} className="flex items-start gap-3 p-3 rounded-lg bg-muted/50">
            <Badge className={`${SEVERITY_COLOR[m.severity]} text-xs`}>{m.severity}</Badge>
            <div className="flex-1 min-w-0">
              <div className="font-medium text-sm">{m.signature}</div>
              <div className="text-xs text-muted-foreground font-mono">{m.path}</div>
              <div className="flex items-center gap-2 mt-2">
                <Badge
                  variant={
                    m.status === "Resolved"
                      ? "default"
                      : m.status === "Quarantined"
                      ? "secondary"
                      : "destructive"
                  }
                  className="text-xs"
                >
                  {m.status}
                </Badge>
                {m.status === "Active" && (
                  <Button size="sm" variant="outline" className="text-xs h-6 bg-transparent">
                    Quarantine
                  </Button>
                )}
              </div>
            </div>
          </div>
        ))}

      </CardContent>
    </Card>
  );
}
