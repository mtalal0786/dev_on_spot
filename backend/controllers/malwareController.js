import { asyncHandler } from '../lib/asyncHandler.js';
import Malware from '../models/Malware.js';
import { getPaging } from '../lib/pagination.js';
import { like } from '../lib/buildQuery.js';

// Escape regex for search
const escapeRegex = (text) => text.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");

export const listMalware = asyncHandler(async (req, res) => {
  const { page, pageSize, skip, limit } = getPaging(req.query, { page: 1, pageSize: 15 });
  const { q, severity = 'all', status = 'all' } = req.query;

  const where = {};

  // Search by signature or path
  if (q) {
    const trimmedQ = q.trim();
    const regex = new RegExp(escapeRegex(trimmedQ), 'i');
    where.$or = [{ signature: regex }, { path: regex }];
  }

  if (severity !== 'all') where.severity = severity;
  if (status !== 'all') where.status = status;

  try {
    const [rowsRaw, total] = await Promise.all([
      Malware.find(where).sort({ detectedAt: -1 }).skip(skip).limit(limit),
      Malware.countDocuments(where),
    ]);

    const rows = rowsRaw.map((m) => ({
      id: m._id.toString(),
      severity: m.severity,
      signature: m.signature,
      path: m.path,
      status: m.status,
      detectedAt: m.detectedAt,
    }));

    res.json({ rows, page, pageSize, total });
  } catch (error) {
    console.error(error);
    res.status(500).json({ rows: [], page, pageSize, total: 0, error: 'Failed to fetch malware data' });
  }
});
